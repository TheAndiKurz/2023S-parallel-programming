The program takes n (vector length) as input paramenter, and executes the given code. 
The vector are initialized as follows:
a = 1, b = 2, c = 3
The expected value of a[i] is 600001 (2*3*100000 + 1). This gets checked at the end of the program by assertions over each element of the vector. 

Vectorization is enabled by using '-ftree_vecortize' (default with -O3).
To get innformation about what was beeing vectorized '-fopt-info-vec' can be used. The output is:
```
auto_vec.c:38:5: optimized: loop vectorized using 16 byte vectors (init)
auto_vec.c:38:5: optimized:  loop versioned for vectorization because of possible aliasing (init)
auto_vec.c:48:9: optimized: loop vectorized using 16 byte vectors
auto_vec.c:48:9: optimized:  loop versioned for vectorization because of possible aliasing
```

The vectorized version still gives correct results. 
The performance is improved but not as much as expected. (interestingly, the speedup on my local system is much higher than on the cluster)
On the lcc2, there is a speedup of roughly 140%. It increases as the vector length gets bigger, and decreases again for big n. 
On my local system (OSX / intel) this behaivior is similar, but the speedup is between 240% and 300%, depending on n.


The interesting event of perf stat is rC710:u, which is the number of vector instructions retired.
The number of vector instructions retired in the vectorized version is a quarter of the reference version, 
which is expected, as 4 floats fit into one vector instruction.

The output of perf stat for SIMD_INST_RETIRED.VECTOR is: 
```
 Performance counter stats for './reference 2048':

        4100013423      rC710:u                                                     

       2.484792987 seconds time elapsed

       2.479327000 seconds user
       0.002999000 seconds sys



 Performance counter stats for './vectorized 2048':

        1025012305      rC710:u                                                     

       1.729645755 seconds time elapsed

       1.725025000 seconds user
       0.002998000 seconds sys
```
